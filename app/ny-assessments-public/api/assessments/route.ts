// app/ny-assessments-public/api/assessments/route.ts
import { NextResponse } from "next/server";
import {
  loadAssessments,
  getSchoolNames,
  loadSchoolForName,
} from "@/lib/loadAssessments";

function originFrom(req: Request) {
  const u = new URL(req.url);
  return `${u.protocol}//${u.host}`;
}

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const subject = (searchParams.get("subject") || "ELA").trim();
  const level = (searchParams.get("level") || "city").trim().toLowerCase();
  const wantNames = searchParams.has("names");
  const school = (searchParams.get("school") || "").trim();

  try {
    // ---- names list for School combobox (served statically) ----
    if (level === "school" && wantNames) {
      // reads from public JSON (generated by scripts/build-school-names.mjs)
      const base = originFrom(req);
      const res = await fetch(
        `${base}/ny-assessments-public/school-names.json`,
        { cache: "force-cache" }
      );
      if (!res.ok) throw new Error(`names.json ${res.status}`);
      const json = await res.json();
      return NextResponse.json(
        { names: Array.isArray(json?.names) ? json.names : [] },
        { headers: { "Cache-Control": "public, max-age=600, stale-while-revalidate=86400" } }
      );
    }

    // ---- SCHOOL: keep streaming-by-name (small payload) ----
    if (level === "school") {
      if (!school || school === "All") {
        return NextResponse.json({}, { headers: { "Cache-Control": "no-store" } });
      }
      // In dev, we read XLSX; in prod this still works because it loads only one school.
      const payload = await loadSchoolForName(subject, school);
      return NextResponse.json(payload, { headers: { "Cache-Control": "no-store" } });
    }

    // ---- CITY / BOROUGH / DISTRICT: proxy to prebuilt static JSON in prod ----
    const base = originFrom(req);
    const staticUrl = `${base}/ny-assessments-public/data/${encodeURIComponent(
      subject
    )}/${encodeURIComponent(level)}.json`;

    // Try static first (Netlify)
    const staticRes = await fetch(staticUrl, { cache: "force-cache" });
    if (staticRes.ok) {
      const data = await staticRes.json();
      return NextResponse.json(
        data,
        { headers: { "Cache-Control": "public, max-age=300, stale-while-revalidate=3600" } }
      );
    }

    // Fallback (local dev): parse XLSX
    const payload = await loadAssessments(subject, level);
    return NextResponse.json(
      payload,
      { headers: { "Cache-Control": "public, max-age=300, stale-while-revalidate=3600" } }
    );
  } catch (e: any) {
    console.error("[/ny-assessments-public/api/assessments] error:", e);
    return NextResponse.json({ error: e?.message || "Server error" }, { status: 500 });
  }
}
